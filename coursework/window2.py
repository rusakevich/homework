from PyQt5 import QtWidgets, QtCore, Qt
from base import *
from __init__ import Params, warning, message_warning, message_info


class Window2(QtWidgets.QWidget, Params):
    def __init__(self,parent=None):
        super().__init__(parent, QtCore.Qt.Window)
        self.setWindowModality(QtCore.Qt.WindowModal)
        self.tunning()
    def tunning(self):
        self.setWindowTitle('Отредактировать данные сотрудника')
        self.spacer1 = QtWidgets.QSpacerItem(0, 0, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.spacer2 = QtWidgets.QSpacerItem(0, 0, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.spacer3 = QtWidgets.QSpacerItem(0, 0, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.spacer4 = QtWidgets.QSpacerItem(0, 0, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.label_select = QtWidgets.QLabel('Сотрудник')
        self.box_select = QtWidgets.QComboBox()                  
        self.box_select.addItems(self.box())
        self.box_select.setToolTip('Выберите сотрудника')
        self.btnExit = QtWidgets.QPushButton('Закрыть')
        self.btnSaveExit = QtWidgets.QPushButton('Обновить и закрыть')
        self.btnSave = QtWidgets.QPushButton('Обновить')
        self.btnExit.setToolTip('Закрыть')
        self.btnSaveExit.setToolTip('Обновить данные сотрудника и закрыть')
        self.btnSave.setToolTip('Обновить данные сотрудника')
        self.label_surname = QtWidgets.QLabel('Фамилия')
        self.label_name = QtWidgets.QLabel('Имя')
        self.label_patronymic = QtWidgets.QLabel('Отчество')
        self.label_birthdate = QtWidgets.QLabel('Дата рождения')
        self.label_sex = QtWidgets.QLabel('Пол')
        self.label_phone = QtWidgets.QLabel('Номер телефона')
        self.label_email = QtWidgets.QLabel('Электронная почта')
        self.label_post = QtWidgets.QLabel('Должность')
        self.label_department = QtWidgets.QLabel('Отдел')
        self.label_date_of_recruitment = QtWidgets.QLabel('Дата приёма на работу')
        self.label_marital_status = QtWidgets.QLabel('Семеное положение')
        self.line_surname = QtWidgets.QLineEdit()
        self.line_surname.setPlaceholderText('Иванов')
        self.line_surname.setToolTip('Отредактируйте фамилию')
        self.line_name = QtWidgets.QLineEdit()
        self.line_name.setPlaceholderText('Иван')
        self.line_name.setToolTip('Отредактируйте имя')
        self.line_patronymic = QtWidgets.QLineEdit()
        self.line_patronymic.setPlaceholderText('Иванович')
        self.line_patronymic.setToolTip('Отредактируйте отчество')
        self.line_birthdate = QtWidgets.QDateEdit()
        self.line_birthdate.setToolTip('Выберите дату рождения')
        self.line_sex = Qt.QComboBox()
        self.line_sex.addItems(['Мужской','Женский'])
        self.line_sex.setToolTip('Выберите пол')
        self.line_phone = QtWidgets.QLineEdit()
        self.line_phone.setInputMask('+7(000)0000000')
        self.line_phone.setToolTip('Отредактируйте номер телефона')
        self.line_email = QtWidgets.QLineEdit()
        self.line_email.setPlaceholderText('example@example.com')
        self.line_email.setToolTip('Отредактируйте адрес электронной почты')
        self.line_post = QtWidgets.QLineEdit()
        self.line_post.setToolTip('Отредактируйте название должности')
        self.line_department = QtWidgets.QLineEdit()
        self.line_department.setToolTip('Отредактируйте название отдела')
        self.line_date_of_recruitment = QtWidgets.QDateEdit()
        self.line_date_of_recruitment.setToolTip('Выберите дату приёма на работу')
        self.line_marital_status = Qt.QComboBox()
        self.line_marital_status.addItems(['Женат','Не женат','Замужем','Не замужем'])
        self.line_marital_status.setToolTip('Выберите семейное положение')
        self.gbox = QtWidgets.QGridLayout(self)      
        self.gbox.addItem(self.spacer1,0,0,1,2)
        self.gbox.addItem(self.spacer3,1,0,14,1)
        self.gbox.addWidget(self.label_select,1,1)
        self.gbox.addWidget(self.label_surname,2,1)
        self.gbox.addWidget(self.label_name,3,1)
        self.gbox.addWidget(self.label_patronymic,4,1)
        self.gbox.addWidget(self.label_birthdate,5,1)
        self.gbox.addWidget(self.label_sex,6,1)
        self.gbox.addWidget(self.label_phone,7,1)
        self.gbox.addWidget(self.label_email,8,1)
        self.gbox.addWidget(self.label_post,9,1)
        self.gbox.addWidget(self.label_department,10,1)
        self.gbox.addWidget(self.label_date_of_recruitment,11,1)
        self.gbox.addWidget(self.label_marital_status,12,1)
        self.gbox.addWidget(self.box_select,1,2)
        self.gbox.addWidget(self.line_surname,2,2)
        self.gbox.addWidget(self.line_name,3,2)
        self.gbox.addWidget(self.line_patronymic,4,2)
        self.gbox.addWidget(self.line_birthdate,5,2)
        self.gbox.addWidget(self.line_sex,6,2)
        self.gbox.addWidget(self.line_phone,7,2)
        self.gbox.addWidget(self.line_email,8,2)
        self.gbox.addWidget(self.line_post,9,2)
        self.gbox.addWidget(self.line_department,10,2)
        self.gbox.addWidget(self.line_date_of_recruitment,11,2)
        self.gbox.addWidget(self.line_marital_status,12,2)
        self.gbox.addWidget(self.btnSave,13,1,1,2)
        self.gbox.addWidget(self.btnExit,14,2)
        self.gbox.addWidget(self.btnSaveExit,14,1)
        self.gbox.addItem(self.spacer4,1,3,14,1)
        self.gbox.addItem(self.spacer2,15,0,1,2)
        self.findchange()
        self.box_select.currentTextChanged.connect(self.findchange)
        self.btnSaveExit.clicked.connect(self.saveexit)
        self.btnSave.clicked.connect(self.saveall)
        self.btnExit.clicked.connect(self.close)
    def findchange(self):
        if self.box_select.currentText() != '':
            with db_session:
                self.line_surname.setText(Employee.get(key=self.return_key()).surname)
                self.line_name.setText(Employee.get(key=self.return_key()).name)
                self.line_patronymic.setText(Employee.get(key=self.return_key()).patronymic)
                self.line_birthdate.setDate(Employee.get(key=self.return_key()).birthdate)
                self.line_sex.setCurrentText(Employee.get(key=self.return_key()).sex)
                self.line_phone.setText(Employee.get(key=self.return_key()).phone)
                self.line_email.setText(Employee.get(key=self.return_key()).email)
                self.line_post.setText(Employee.get(key=self.return_key()).post)
                self.line_department.setText(Employee.get(key=self.return_key()).department)
                self.line_date_of_recruitment.setDate(Employee.get(key=self.return_key()).date_of_recruitment)
                self.line_marital_status.setCurrentText(Employee.get(key=self.return_key()).marital_status)
    def save(self):
        with db_session:
            self.key2 = self.return_key()
            Employee.get(key=self.key2).surname = self.line_surname.text()
            Employee.get(key=self.key2).name = self.line_name.text()
            Employee.get(key=self.key2).patronymic = self.line_patronymic.text()
            Employee.get(key=self.key2).birthdate = self.line_birthdate.text()
            Employee.get(key=self.key2).sex = self.line_sex.currentText()
            Employee.get(key=self.key2).phone = self.line_phone.text()
            Employee.get(key=self.key2).email = self.line_email.text()
            Employee.get(key=self.key2).post = self.line_post.text()
            Employee.get(key=self.key2).department = self.line_department.text()
            Employee.get(key=self.key2).date_of_recruitment = self.line_date_of_recruitment.text()
            Employee.get(key=self.key2).marital_status = self.line_marital_status.currentText()
            message_info(self, 'Данные сотрудника изменены')
            self.box_select.clear()
            self.box_select.addItems(self.box())
    def saveall(self):
        message_warning(self, 'Заполнены не все обязательные поля') if warning(self) else self.save() 
    def saveexit(self):
        message_warning(self, 'Заполнены не все обязательные поля') if warning(self) else (self.save(), self.close())
